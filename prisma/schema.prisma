// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int                @id @default(autoincrement()) @map("user_id")
  firstName         String             @map("first_name") @db.VarChar(64)
  lastName          String             @map("last_name") @db.VarChar(64)
  userBio           String             @default("") @map("user_bio") @db.VarChar(512)
  phoneNumber       String             @unique @map("phone_number") @db.VarChar(15)
  email             String             @unique @db.VarChar(255)
  isEmailVerified   Boolean            @default(false) @map("is_email_verified")
  isPhoneVerified   Boolean            @default(false) @map("is_phone_verified")
  role              Role               @default(user)
  password          String             @db.VarChar(60)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  EmailVerification EmailVerification?
  PhoneVerification PhoneVerification?
  UserPhoto         UserPhoto?
  Pet               Pet[]

  @@map("user")
}

model Pet {
  petId       Int      @id @default(autoincrement()) @map("pet_id")
  ownerId     Int      @map("owner_id")
  user        User     @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  name        String   @map("name") @db.VarChar(64)
  description String   @default("") @map("description") @db.VarChar(512)
  petType     PetType  @map("type")
  birthday    DateTime @map("birthday") @db.Date
  country     String   @map("country") @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  PetPhoto PetPhoto[]
}

enum PetType {
  dog
  cat
  bird
  fish
  reptile
  rodent
  other
}

model PetPhoto {
  photoId   Int      @id @default(autoincrement()) @map("photo_id")
  petId     Int      @unique @map("pet_id")
  pet       Pet      @relation(fields: [petId], references: [petId], onDelete: Cascade)
  key       String   @map("key") @db.VarChar(255)
  photoUrl  String   @map("photo_url") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pet_photo")
}

model UserPhoto {
  photoId   Int      @id @default(autoincrement()) @map("photo_id")
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  key       String   @map("key") @db.VarChar(255)
  photoUrl  String   @map("photo_url") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_photo")
}

model EmailVerification {
  emailCodeId Int      @id @default(autoincrement()) @map("email_code_id")
  userId      Int      @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  code        String   @map("code") @db.VarChar(8)
  expiresAt   DateTime @map("expires_at")

  @@map("email_verification")
}

model PhoneVerification {
  phoneCodeId Int      @id @default(autoincrement()) @map("phone_code_id")
  userId      Int      @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  code        String   @map("code") @db.VarChar(8)
  expiresAt   DateTime @map("expires_at")

  @@map("phone_verification")
}

enum Role {
  admin
  user
}
